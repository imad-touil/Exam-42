START sandbox(f, timeout, verbose)
|
├── Fork a process with pid = fork()
|   |
|   ├── If fork fails (pid < 0)
|   |   ├── If verbose is true, print error message
|   |   └── Return -1 (error in sandbox)
|   |
|   ├── If in child process (pid == 0)
|   |   |
|   |   ├── Set up signal handler for SIGALRM
|   |   |   ├── Initialize sigaction structure (sa)
|   |   |   ├── Set sa.sa_handler to timeout_handler
|   |   |   └── Register handler with sigaction(SIGALRM, &sa, NULL)
|   |   |
|   |   ├── Set alarm to trigger after 'timeout' seconds
|   |   ├── Execute the function f()
|   |   └── If f() returns normally, exit with code 0
|   |
|   └── If in parent process
|       |
|       ├── Wait for child process with waitpid(pid, &status, 0)
|       |   └── If waitpid fails (result < 0)
|       |       ├── If verbose is true, print error message
|       |       └── Return -1 (error in sandbox)
|       |
|       └── Check how child process terminated
|           |
|           ├── If exited normally (WIFEXITED)
|           |   |
|           |   ├── Get exit code with WEXITSTATUS
|           |   |
|           |   ├── If exit_code == 0 (success)
|           |   |   ├── If verbose is true, print "Nice function!"
|           |   |   └── Return 1 (nice function)
|           |   |
|           |   ├── If exit_code == 142 (timeout)
|           |   |   ├── If verbose is true, print timeout message
|           |   |   └── Return 0 (bad function)
|           |   |
|           |   └── If any other exit_code (failure)
|           |       ├── If verbose is true, print exit code message
|           |       └── Return 0 (bad function)
|           |
|           ├── If terminated by signal (WIFSIGNALED)
|           |   ├── Get signal number with WTERMSIG
|           |   ├── If verbose is true, print signal description
|           |   └── Return 0 (bad function)
|           |
|           └── If any other termination reason
|               ├── If verbose is true, print unknown message
|               └── Return 0 (bad function)
|
END